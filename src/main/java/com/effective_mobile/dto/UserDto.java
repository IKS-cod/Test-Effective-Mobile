package com.effective_mobile.dto;

import com.effective_mobile.enums.Role;

/**
 * Класс, представляющий информацию о пользователе.
 * Используется для передачи данных о пользователе между слоями приложения.
 * <p>
 *  Этот DTO содержит идентификатор, email, пароль и роль пользователя.
 * </p>
 *
 */
public class UserDto {

    /**
     * Уникальный идентификатор пользователя.
     */
    private Long id;

    /**
     * Email пользователя.
     */
    private String email;

    /**
     * Пароль пользователя.
     * <p>
     *   **Важно:** В реальных приложениях пароли никогда не должны передаваться в открытом виде.
     *   Это поле предназначено только для демонстрационных целей и должно быть заменено более безопасным подходом,
     *   например, передачей хеша пароля или использованием токенов.
     * </p>
     */
    private String password;

    /**
     * Роль пользователя.
     */
    private Role role;

    /**
     * Возвращает строковое представление объекта UserDto.
     *
     * @return Строковое представление объекта.
     */
    @Override
    public String toString() {
        return "UserDto{" +
                "id=" + id +
                ", email='" + email + '\'' +
                ", password='" + password + '\'' +
                ", role=" + role +
                '}';
    }

    /**
     * Создает новый объект UserDto.
     */
    public UserDto() {
    }

    /**
     * Создает новый объект UserDto с заданными параметрами.
     *
     * @param id       Уникальный идентификатор пользователя.
     * @param email    Email пользователя.
     * @param password Пароль пользователя.
     *                 <p>
     *                  **Важно:** В реальных приложениях пароли никогда не должны передаваться в открытом виде.
     *                  Это поле предназначено только для демонстрационных целей и должно быть заменено более безопасным подходом.
     *                 </p>
     * @param role     Роль пользователя.
     */
    public UserDto(Long id, String email, String password, Role role) {
        this.id = id;
        this.email = email;
        this.password = password;
        this.role = role;
    }

    /**
     * Возвращает идентификатор пользователя.
     *
     * @return Идентификатор пользователя.
     */
    public Long getId() {
        return id;
    }

    /**
     * Устанавливает идентификатор пользователя.
     *
     * @param id Идентификатор пользователя.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Возвращает email пользователя.
     *
     * @return Email пользователя.
     */
    public String getEmail() {
        return email;
    }

    /**
     * Устанавливает email пользователя.
     *
     * @param email Email пользователя.
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Возвращает пароль пользователя.
     *  <p>
     *   **Важно:** В реальных приложениях пароли никогда не должны передаваться в открытом виде.
     *   Это поле предназначено только для демонстрационных целей и должно быть заменено более безопасным подходом.
     *  </p>
     * @return Пароль пользователя.
     */
    public String getPassword() {
        return password;
    }

    /**
     * Устанавливает пароль пользователя.
     *  <p>
     *   **Важно:** В реальных приложениях пароли никогда не должны передаваться в открытом виде.
     *   Это поле предназначено только для демонстрационных целей и должно быть заменено более безопасным подходом.
     *  </p>
     * @param password Пароль пользователя.
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Возвращает роль пользователя.
     *
     * @return Роль пользователя.
     */
    public Role getRole() {
        return role;
    }

    /**
     * Устанавливает роль пользователя.
     *
     * @param role Роль пользователя.
     */
    public void setRole(Role role) {
        this.role = role;
    }
}
